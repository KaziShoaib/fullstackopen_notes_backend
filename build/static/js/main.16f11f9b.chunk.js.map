{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseURL","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.16f11f9b.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../index.css';\r\n\r\nconst Note = ({note, toggleImportance}) => {\r\n  let label = note.important ? \"make not important\" : \"make important\";\r\n  return (\r\n    <li className='note'>\r\n      {note.content} \r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note;","import axios from 'axios'\r\n\r\nlet baseURL = `/api/notes`\r\n\r\nconst getAll = () => {\r\n  let request = axios.get(baseURL)\r\n  let nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true,\r\n  }\r\n  return request.then(response => response.data.concat(nonExisting))\r\n  //return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n  let request = axios.post(baseURL, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  let request = axios.put(`${baseURL}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, update}","import React, {useState, useEffect} from 'react';\r\nimport Note from './components/Note'\r\nimport noteService from './services/notes';\r\nimport './index.css'\r\n\r\nconst Notification = ({message}) => {\r\n  if(message === null){\r\n    return null;\r\n  }\r\n  return (\r\n\r\n    <div className='error'>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Footer = () => {\r\n  let footerStyle = {\r\n    color:'green',\r\n    fontStyle:'italic',\r\n    fontSize:16\r\n  }\r\n  return (\r\n    <div style={footerStyle}>\r\n      <em>Created by Kazi Shoaib Muhammad</em>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([]);\r\n  const [newNote, setNewNote] = useState('a new note ....');\r\n  const [showAll, setShowAll] = useState(true);\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  useEffect(()=>{\r\n    //console.log('effect');\r\n    noteService\r\n      .getAll()\r\n      .then(initialNotes => setNotes(initialNotes))\r\n  }, []);\r\n  console.log('render ', notes.length, 'notes');\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault();\r\n    let noteObject = {\r\n      id: notes.length+1,\r\n      content: newNote,\r\n      date : new Date().toISOString(),\r\n      important : Math.random()<0.5\r\n    };\r\n    noteService\r\n      .create(noteObject)\r\n      .then(returnedNote => {\r\n        setNotes(notes.concat(returnedNote));\r\n        setNewNote('');  \r\n      })\r\n  }\r\n  \r\n  const handleNoteChange = (event) => {\r\n    //console.log(event.target.value);\r\n    setNewNote(event.target.value);\r\n  }\r\n\r\n  let notesToShow = showAll ? notes : notes.filter(note => note.important === true);\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    console.log(`importance of note number ${id} needs to be changed`);\r\n    let note = notes.find(n => n.id === id);\r\n    let changedNote = {...note, important : !note.important};\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(returnedNote => {\r\n        setNotes(notes.map(n => n.id !== id ? n : returnedNote))\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(`the note '${note.content}' has been deleted`);\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000);\r\n        setNotes(notes.filter(n => n.id !== id ));\r\n      })\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      <h1>NOTES</h1>\r\n      <Notification message = {errorMessage} />\r\n      <div>\r\n        <button onClick={()=>setShowAll(!showAll)}>\r\n          Show {showAll ? 'Important' : \"All\"}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map(note => <Note key={note.id} note={note} toggleImportance = {()=>{toggleImportanceOf(note.id)}}/>)}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input value={newNote} onChange={handleNoteChange}/>\r\n        <button type=\"submit\">Save</button>\r\n      </form>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport axios from 'axios';\n\n\n\n  ReactDOM.render(\n    <App />,\n    document.getElementById('root')\n  );\n\n\n\n\n\n\n"],"sourceRoot":""}