{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseURL","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"uJAaeA,G,KAVF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACfC,EAAQF,EAAKG,UAAY,qBAAuB,iBACpD,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,S,gBCNtCK,EAAO,aAwBI,EAtBA,WASb,OARcC,IAAMC,IAAIF,GAQTG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAACC,GAEd,OADcL,IAAMM,KAAKP,EAASM,GACnBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADcL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC7BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SClBrCK,EAAe,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACrB,OAAe,OAAZA,EACM,KAIP,qBAAKd,UAAU,QAAf,SACGc,KAKDC,EAAS,WAMb,OACE,qBAAKC,MANW,CAChBC,MAAM,QACNC,UAAU,SACVC,SAAS,IAGT,SACE,oEAwFSC,EAnFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,mBAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WAERC,IAEGzB,MAAK,SAAA0B,GAAY,OAAIT,EAASS,QAChC,IACHC,QAAQC,IAAI,UAAWZ,EAAMa,OAAQ,SAErC,IA0BIC,EAAcV,EAAUJ,EAAQA,EAAMe,QAAO,SAAAzC,GAAI,OAAuB,IAAnBA,EAAKG,aAqB9D,OACE,gCACE,uCACA,cAAC,EAAD,CAAce,QAAWc,IACzB,8BACE,yBAAQ1B,QAAS,kBAAIyB,GAAYD,IAAjC,kBACQA,EAAU,YAAc,WAGlC,6BACGU,EAAYE,KAAI,SAAA1C,GAAI,OAAI,cAAC,EAAD,CAAoBA,KAAMA,EAAMC,iBAAoB,YA7BxD,SAACc,GAE1B,IAAIf,EAAO0B,EAAMiB,MAAK,SAAAC,GAAC,OAAIA,EAAE7B,KAAOA,KAChC8B,EAAW,2BAAO7C,GAAP,IAAaG,WAAaH,EAAKG,YAC9CgC,EACUpB,EAAI8B,GACXnC,MAAK,SAAAoC,GACJnB,EAASD,EAAMgB,KAAI,SAAAE,GAAC,OAAIA,EAAE7B,KAAOA,EAAK6B,EAAIE,SAE3CC,OAAM,SAAAC,GAELf,EAAgB,aAAD,OAAcjC,EAAKK,QAAnB,uBACf4C,YAAW,WACThB,EAAgB,QACf,KACHN,EAASD,EAAMe,QAAO,SAAAG,GAAC,OAAIA,EAAE7B,KAAOA,SAc8CmC,CAAmBlD,EAAKe,MAAtEf,EAAKe,SAE3C,uBAAMoC,SA3DM,SAACC,GACfA,EAAMC,iBACN,IAAIC,EAAa,CACfjD,QAASuB,EACT2B,MAAO,IAAIC,MAAOC,cAClBtD,UAAYuD,KAAKC,SAAS,IAE5BxB,EACUmB,GACP5C,MAAK,SAAAoC,GACJnB,EAASD,EAAMkC,OAAOd,IACtBjB,EAAW,OAEZkB,OAAM,SAAAC,GACLf,EAAgBe,EAAMrC,SAASC,KAAKoC,OACpCC,YAAW,WACThB,EAAgB,QACf,SA0CL,UACE,uBAAO4B,MAAOjC,EAASkC,SAvCJ,SAACV,GAExBvB,EAAWuB,EAAMW,OAAOF,UAsCpB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,QCpGJC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.01c70d2a.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../index.css';\r\n\r\nconst Note = ({note, toggleImportance}) => {\r\n  let label = note.important ? \"make not important\" : \"make important\";\r\n  return (\r\n    <li className='note'>\r\n      {note.content} \r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note;","import axios from 'axios'\r\n\r\nlet baseURL = `/api/notes`\r\n\r\nconst getAll = () => {\r\n  let request = axios.get(baseURL)\r\n  // let nonExisting = {\r\n  //   id: 10000,\r\n  //   content: 'This note is not saved to server',\r\n  //   date: '2019-05-30T17:30:31.098Z',\r\n  //   important: true,\r\n  // }\r\n  // return request.then(response => response.data.concat(nonExisting))\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n  let request = axios.post(baseURL, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  let request = axios.put(`${baseURL}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, update}","import React, {useState, useEffect} from 'react';\r\nimport Note from './components/Note'\r\nimport noteService from './services/notes';\r\nimport './index.css'\r\n\r\nconst Notification = ({message}) => {\r\n  if(message === null){\r\n    return null;\r\n  }\r\n  return (\r\n\r\n    <div className='error'>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Footer = () => {\r\n  let footerStyle = {\r\n    color:'green',\r\n    fontStyle:'italic',\r\n    fontSize:16\r\n  }\r\n  return (\r\n    <div style={footerStyle}>\r\n      <em>Created by Kazi Shoaib Muhammad</em>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([]);\r\n  const [newNote, setNewNote] = useState('a new note ....');\r\n  const [showAll, setShowAll] = useState(true);\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  useEffect(()=>{\r\n    //console.log('effect');\r\n    noteService\r\n      .getAll()\r\n      .then(initialNotes => setNotes(initialNotes))\r\n  }, []);\r\n  console.log('render ', notes.length, 'notes');\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault();\r\n    let noteObject = {\r\n      content: newNote,\r\n      date : new Date().toISOString(),\r\n      important : Math.random()<0.5\r\n    };\r\n    noteService\r\n      .create(noteObject)\r\n      .then(returnedNote => {\r\n        setNotes(notes.concat(returnedNote));\r\n        setNewNote('');  \r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(error.response.data.error);\r\n        setTimeout(()=>{\r\n          setErrorMessage(null)\r\n        }, 5000)\r\n      })\r\n  }\r\n  \r\n  const handleNoteChange = (event) => {\r\n    //console.log(event.target.value);\r\n    setNewNote(event.target.value);\r\n  }\r\n\r\n  let notesToShow = showAll ? notes : notes.filter(note => note.important === true);\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    //console.log(`importance of note number ${id} needs to be changed`);\r\n    let note = notes.find(n => n.id === id);\r\n    let changedNote = {...note, important : !note.important};\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(returnedNote => {\r\n        setNotes(notes.map(n => n.id !== id ? n : returnedNote))\r\n      })\r\n      .catch(error => {\r\n        \r\n        setErrorMessage(`the note '${note.content}' has been deleted`);\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000);\r\n        setNotes(notes.filter(n => n.id !== id ));\r\n      })\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      <h1>NOTES</h1>\r\n      <Notification message = {errorMessage} />\r\n      <div>\r\n        <button onClick={()=>setShowAll(!showAll)}>\r\n          Show {showAll ? 'Important' : \"All\"}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map(note => <Note key={note.id} note={note} toggleImportance = {()=>{toggleImportanceOf(note.id)}}/>)}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input value={newNote} onChange={handleNoteChange}/>\r\n        <button type=\"submit\">Save</button>\r\n      </form>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport axios from 'axios';\n\n\n\n  ReactDOM.render(\n    <App />,\n    document.getElementById('root')\n  );\n\n\n\n\n\n\n"],"sourceRoot":""}