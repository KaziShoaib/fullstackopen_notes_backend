{"version":3,"sources":["components/Note.js","services/notes.js","services/login.js","components/Footer.js","components/Notification.js","components/LoginForm.js","components/Togglable.js","components/NoteForm.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseURL","token","getAll","axios","get","then","response","data","create","newObject","a","config","headers","Authorization","post","update","id","put","setToken","newToken","login","credential","Footer","style","color","fontStyle","fontSize","Notification","message","LoginForm","handleLogin","useState","username","setUsername","password","setPassword","onSubmit","event","preventDefault","type","name","value","onChange","target","Togglable","React","forwardRef","props","ref","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","buttonLabel","children","displayName","NoteForm","addNote","newNote","setNewNote","App","notes","setNotes","showAll","setShowAll","errorMessage","setErrorMessage","user","setUser","noteFormRef","useRef","useEffect","noteService","initialNotes","console","log","length","loggedUserDataJSON","window","localStorage","getItem","userData","JSON","parse","userCredentials","loginService","setItem","stringify","setTimeout","noteObject","current","returnedNote","concat","catch","error","notesToShow","filter","removeItem","map","find","n","changedNote","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.24a51218.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../index.css';\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  let label = note.important ? 'make not important' : 'make important';\r\n  return (\r\n    <li className='note'>\r\n      <span>{note.content}</span>\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Note;","import axios from 'axios';\r\n\r\nlet baseURL = '/api/notes';\r\nlet token = null;\r\n\r\n//this function is called from app.js when someone logs in with token returned from backend\r\nconst setToken = (newToken) => {\r\n  token = `bearer ${newToken}`;\r\n};\r\n\r\n\r\nconst getAll = () => {\r\n  let request = axios.get(baseURL);\r\n  // let nonExisting = {\r\n  //   id: 10000,\r\n  //   content: 'This note is not saved to server',\r\n  //   date: '2019-05-30T17:30:31.098Z',\r\n  //   important: true,\r\n  // }\r\n  // return request.then(response => response.data.concat(nonExisting))\r\n  return request.then(response => response.data);\r\n};\r\n\r\nconst create = async (newObject) => {\r\n  const config = {\r\n    headers : { Authorization : token }\r\n  };\r\n  const response = await axios.post(baseURL, newObject, config);\r\n  return response.data;\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  let request = axios.put(`${baseURL}/${id}`, newObject);\r\n  return request.then(response => response.data);\r\n};\r\n\r\nexport default { getAll, create, update, setToken };","import axios from 'axios';\r\nconst baseURL = '/api/login';\r\n\r\nconst login = async (credential) => {\r\n  const response = await axios.post(baseURL, credential);\r\n  return response.data;\r\n};\r\n\r\nexport default { login };","import React from 'react';\r\nimport '../index.css';\r\n\r\n\r\nconst Footer = () => {\r\n  let footerStyle = {\r\n    color:'green',\r\n    fontStyle:'italic',\r\n    fontSize:16\r\n  };\r\n  return (\r\n    <div style={footerStyle}>\r\n      <em>Created by Kazi Shoaib Muhammad</em>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default Footer;","import React from 'react';\r\nimport '../index.css';\r\n\r\n\r\nconst Notification = ({ message }) => {\r\n  if(message === null){\r\n    return null;\r\n  }\r\n  return (\r\n\r\n    <div className='error'>\r\n      {message}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default Notification;","import React, { useState } from 'react';\r\nimport '../index.css';\r\n\r\n//we can use PropTypes to declare that some of the props must be\r\n//provided from the parent element\r\n//the App component in this case\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n//this component creates it's own states\r\n//it get one function in props\r\n//once the log in button is pressed the login form submission function\r\n//sends the new user credentials to the props function\r\n\r\n\r\nconst LoginForm = ({ handleLogin }) => {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  //this function should be async and await the handleLogin function\r\n  const sendUserCredentials = (event) => {\r\n    event.preventDefault();\r\n    const userCredentials = {\r\n      username, password\r\n    };\r\n    handleLogin(userCredentials);\r\n    setUsername('');\r\n    setPassword('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Log In</h2>\r\n      <form onSubmit={sendUserCredentials}>\r\n        {/* the ids are necessary for testing */}\r\n        <div>\r\n          username:\r\n          <input\r\n            type=\"text\"\r\n            name=\"Username\"\r\n            id='username'\r\n            value={username}\r\n            onChange={(event) => {setUsername(event.target.value);}}\r\n          />\r\n        </div>\r\n        <div>\r\n          password:\r\n          <input\r\n            type=\"password\"\r\n            name=\"Password\"\r\n            id='password'\r\n            value={password}\r\n            onChange={(event) => {setPassword(event.target.value);}}\r\n          />\r\n        </div>\r\n        <button id='login-button' type=\"submit\">Log in</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\n//we are declaring that\r\n// the handleLogin prop is required\r\n// and it should be a function\r\n// if the handleLogin is not provided in the props\r\n//there will be an error in the console\r\nLoginForm.propTypes = {\r\n  handleLogin: PropTypes.func.isRequired\r\n};\r\n\r\nexport default LoginForm;","import { useState, useImperativeHandle } from 'react';\r\nimport React from 'react';\r\nimport '../index.css';\r\n\r\n//we can use PropTypes to declare that some of the props must be\r\n//provided from the parent element\r\n//the App component in this case\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\n//the whole component is wrapeed in a React.forwardRef function call\r\n//because we want to access one of the functions defined here from outside\r\n//i.e. from the App component\r\n//the component gets a ref from the App component\r\nconst Togglable = React.forwardRef((props, ref) => {\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const hideWhenVisible = { display : visible ? 'none' : '' };\r\n  const showWhenVisible = { display : visible ? '' : 'none' };\r\n\r\n  const toggleVisibility = () => {\r\n    setVisible(!visible);\r\n  };\r\n\r\n  //the useImperative function is making sure that the\r\n  //toggleVisibility function can be accessed from an outside component\r\n  //i.e. from the App component\r\n  //It is using the ref sent from the App component\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      toggleVisibility\r\n    };\r\n  });\r\n\r\n  return (\r\n    //the props.children will render all the conponents inside the opening and\r\n    //closing tag of the Togglable component\r\n    <div>\r\n      <div style={hideWhenVisible}>\r\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\r\n      </div>\r\n      {/* the classname is given for testing purpose */}\r\n      <div style={showWhenVisible} className='togglableContent'>\r\n        {props.children}\r\n        <button onClick={toggleVisibility}>cancel</button>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\n//we are declaring that\r\n// the buttonLabel prop is required\r\n// and it should be a string\r\n// if the buttonLabel is not provided in the props\r\n//there will be an error in the console\r\nTogglable.propTypes = {\r\n  buttonLabel: PropTypes.string.isRequired\r\n};\r\n\r\n//this is necessary for eslint\r\n//without this the Togglable component will not have any name\r\nTogglable.displayName = 'Togglable';\r\n\r\nexport default Togglable;","import React, { useState } from 'react';\r\nimport '../index.css';\r\n\r\n//this component creates it's own states\r\n//it only gets one function in props\r\n//once the save button is pressed the form submission function\r\n//sends the new note object to the props function\r\n\r\nconst NoteForm = ({ addNote }) => {\r\n  const [newNote, setNewNote] = useState('');\r\n\r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value);\r\n  };\r\n\r\n  //this function should be async and await the addNote function\r\n  const sendNewNote = (event) => {\r\n    event.preventDefault();\r\n    const noteObject = {\r\n      content: newNote,\r\n      important: false //new notes added from the form are unimportant by default\r\n    };\r\n    addNote(noteObject);\r\n    setNewNote('');\r\n  };\r\n\r\n  return (\r\n    // the className and is are given for testing purpose\r\n    <div className='formDiv'>\r\n      <h2>Create a new note</h2>\r\n      <form onSubmit={sendNewNote}>\r\n        <input id='new-note-input' value={newNote} onChange={handleNoteChange}/>\r\n        <button type=\"submit\">Save</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default NoteForm;","import React, { useState, useEffect, useRef } from 'react';\r\nimport Note from './components/Note';\r\nimport noteService from './services/notes';\r\nimport './index.css';\r\nimport loginService from './services/login';\r\nimport Footer from './components/Footer';\r\nimport Notification from './components/Notification';\r\nimport LoginForm from './components/LoginForm';\r\nimport Togglable from './components/Togglable';\r\nimport NoteForm from './components/NoteForm';\r\n\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([]);\r\n  const [showAll, setShowAll] = useState(true);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n  const [user, setUser] = useState(null);\r\n  //we will use this ref to access function defined in other components\r\n  // i.e. components rendered inside this App component\r\n  const noteFormRef = useRef();\r\n\r\n  useEffect(() => {\r\n    //console.log('effect');\r\n    noteService\r\n      .getAll()\r\n      .then(initialNotes => setNotes(initialNotes));\r\n  }, []);\r\n  console.log('render ', notes.length, 'notes');\r\n\r\n\r\n  useEffect(() => {\r\n    //searching for log in info in the local storage\r\n    const loggedUserDataJSON = window.localStorage.getItem('loggedNoteappUser');\r\n    if(loggedUserDataJSON){\r\n      //userData contains the token, username and name\r\n      const userData = JSON.parse(loggedUserDataJSON);\r\n      setUser(userData);\r\n      //setToken will prepared a bearer token in the noteService local variable token\r\n      noteService.setToken(userData.token);\r\n    }\r\n  }, []);\r\n\r\n\r\n  const handleLogin = async (userCredentials) => {\r\n    try {\r\n      //userData will have the username, name and token returned from backend\r\n      const userData = await loginService.login(userCredentials);\r\n      //saving the userData in the local storage\r\n      window.localStorage.setItem(\r\n        'loggedNoteappUser', JSON.stringify(userData)\r\n      );\r\n      //creating a bearer token in the noteService local variable token\r\n      noteService.setToken(userData.token);\r\n      setUser(userData);\r\n    } catch(exception){\r\n      setErrorMessage('invalid credential');\r\n      setTimeout(() => {\r\n        setErrorMessage(null);\r\n      }, 5000);\r\n    }\r\n  };\r\n\r\n\r\n  const addNote = (noteObject) => {\r\n    //we can access the toggleVisibility function defined in the Togglable\r\n    //component from this App component because of the ref mechanism\r\n    //details inside the Togglable component\r\n    noteFormRef.current.toggleVisibility();\r\n    noteService\r\n      .create(noteObject)\r\n      .then(returnedNote => {\r\n        setNotes(notes.concat(returnedNote));\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(error.response.data.error);\r\n        setTimeout(() => {\r\n          setErrorMessage(null);\r\n        }, 5000);\r\n      });\r\n  };\r\n\r\n  let notesToShow = showAll ? notes : notes.filter(note => note.important === true);\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    //console.log(`importance of note number ${id} needs to be changed`);\r\n    let note = notes.find(n => n.id === id);\r\n    let changedNote = { ...note, important : !note.important };\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(returnedNote => {\r\n        setNotes(notes.map(n => n.id !== id ? n : returnedNote));\r\n      })\r\n      .catch(error => {\r\n\r\n        setErrorMessage(`the note '${note.content}' has been deleted`);\r\n        console.log(error);\r\n        setTimeout(() => {\r\n          setErrorMessage(null);\r\n        }, 5000);\r\n        setNotes(notes.filter(n => n.id !== id ));\r\n      });\r\n  };\r\n\r\n\r\n  const loginForm = () => {\r\n    //the Togglable component has its opening and closing tag\r\n    //the LoginForm component is inside it\r\n    //LoginForm component will be available to Togglable component\r\n    //as {props.children}\r\n    return (\r\n      <Togglable buttonLabel='login'>\r\n        <LoginForm\r\n          handleLogin={handleLogin}\r\n        />\r\n      </Togglable>\r\n    );\r\n  };\r\n\r\n\r\n  const noteForm = () => {\r\n    //The Togglable component has opening and closing tag\r\n    //the NoteForm component is inside the Togglable component\r\n    //NoteForm component will be available to the Togglable component\r\n    //as {props.children}\r\n    return (\r\n      //the ref is transferred because we want to access a function\r\n      //defined in the Togglable component from here\r\n      //i.e. from the App component\r\n      <Togglable buttonLabel='add new note' ref={noteFormRef}>\r\n        <NoteForm\r\n          addNote = {addNote}\r\n        />\r\n      </Togglable>\r\n\r\n    );\r\n  };\r\n\r\n\r\n  const handleLogout = () => {\r\n    //clearing the local storage of the userData\r\n    window.localStorage.removeItem('loggedNoteappUser');\r\n    //setting the noteService local variable token to null\r\n    noteService.setToken(null);\r\n    setUser(null);\r\n  };\r\n\r\n  return(\r\n    <div>\r\n      <h1>NOTES</h1>\r\n      <Notification message = {errorMessage} />\r\n      {\r\n        user === null ?\r\n          loginForm() :\r\n          <div>\r\n            <p>{user.name} logged in</p>\r\n            <button onClick={handleLogout}>Log Out</button>\r\n            {noteForm()}\r\n          </div>\r\n      }\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          Show {showAll ? 'Important' : 'All' }\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map(note => <Note key={note.id} note={note} toggleImportance = {() => {toggleImportanceOf(note.id);}}/>)}\r\n      </ul>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}